require(readr)
require(data.table)
d = fread("sizes.csv")
require(ggplot2)
d
d[, overfit := valid - train]
d
ggplot(aes(size, overfit)) + geom_line()
ggplot(d, aes(size, overfit)) + geom_line()
d[, train = ifelse(train > 0, train, 0)]
d[, train := ifelse(train > 0, train, 0)]
d
d[, valid := ifelse(valid > 0, valid, 0)]
d[, train := ifelse(train < 100, train, 100)]
d[, valid := ifelse(valid < 100, valid, 100)]
ggplot(d, aes(size, overfit)) + geom_line()
d
summary(d$train)
d[, overfit := valid - train]
ggplot(d, aes(size, overfit)) + geom_line()
ggplot(d, aes(size, overfit)) + geom_point()
ggplot(d, aes(size, overfit)) + geom_point(aes(colour = classifier))
ggplot(d, aes(classifier, overfit)) + geom_point(aes(colour = size))
ggplot(d, aes(classifier, overfit)) + geom_point(aes(colour = log(size)))
d[.(classifier, size, overfit)]
d[.(classifier, size, overfit),]
d[, .(classifier, size, overfit)]
print(d[, .(classifier, size, overfit)], nrow = 1000)
print(d[, .(classifier, size, overfit), group = classifier], nrow = 1000)
print(d[, .(classifier, size, overfit), by = classifier], nrow = 1000)
print(d[order(size), .(classifier, size, overfit), by = classifier], nrow = 1000)
print(d[order(size), .(classifier, size, overfit)], nrow = 1000)
?cor
cor(d$size, d$overfit)
cor(d$size, d$overfit, method = "pearson")
cor(d$size, d$overfit, method = "kendall")
cor(d$size, d$overfit, method = "spearman")
require(data.table)
d = fread("sizes-uncompressed.csv")
require(data.table)
d = fread("sizes-uncompressed.csv")
d[, diff := test - train]
d[, diff := validation - training]
d
require(ggplot2)
ggplot(d, aes(size, diff)) + geom_point()
d[, training := max(min(training, 100), 0)]
d[, validation := max(min(validation, 100), 0)]
d[, diff := validation - training]
ggplot(d, aes(size, diff)) + geom_point()
d
d = fread("sizes-uncompressed.csv")
min(d$training, 100)
d$training
?min
d[, training := ifelse(training > 0, training, 0)]
d[, training := ifelse(training < 100, training, 100)]
d[, validation := ifelse(validation > 0, validation, 0)]
d[, validation := ifelse(validation < 100, validation, 100)]
d[, diff := validation - training]
ggplot(d, aes(size, diff)) + geom_point()
ggplot(d, aes(size, diff)) + geom_point(aes(colour = classifier)
)
ggplot(d, aes(size, diff)) + geom_point(aes(colour = classifier))
ggplot(d, aes(classifier, diff)) + geom_point(aes(colour = size))
ggplot(d, aes(classifier, diff)) + geom_point(aes(colour = log(size)))
ggplot(d, aes(classifier, diff)) + geom_point(aes(colour = log(size))) + scale_colour_gradient2()
ggplot(d, aes(classifier, diff)) + geom_point(aes(colour = log(size))) + scale_colour_gradientn(colours = terrain.colors(10))
ggplot(d, aes(classifier, diff)) + geom_point(aes(colour = log(size))) + scale_fill_distiller(palette = "Spectral")
ggplot(d, aes(classifier, diff)) + geom_point(aes(colour = log(size))) + scale_colour_distiller(palette = "Spectral")
ggplot(d, aes(classifier, diff)) + geom_bar(aes(colour = log(size))) + scale_colour_distiller(palette = "Spectral")
?geom_bar
?geom_bar
ggplot(d, aes(classifier, diff)) + geom_bar(aes(colour = log(size)), geom = "bar") + scale_colour_distiller(palette = "Spectral")
?geom_bar
ggplot(d, aes(classifier, diff)) + stat_count(aes(colour = log(size))) + scale_colour_distiller(palette = "Spectral")
ggplot(d, aes(classifier, diff)) + geom_bar(aes(colour = log(size)), stat = "identity") + scale_colour_distiller(palette = "Spectral")
ggplot(d, aes(classifier, diff)) + geom_bar(aes(colour = log(size)), position = "jitter", stat = "identity") + scale_colour_distiller(palette = "Spectral")
ggplot(d, aes(classifier, diff)) + geom_bar(aes(colour = log(size)), position = "dodge", stat = "identity") + scale_colour_distiller(palette = "Spectral")
ggplot(d, aes(classifier, diff, fill = log(size))) + geom_bar(position = "dodge", stat = "identity") + scale_fill_distiller(palette = "Spectral")
d
require(reshape2)
tmp = melt(d)
tmp = data.table::melt(d)
tmp
d[, order(size)]
d[, order(size),]
d[order(size)]
d[order(size), by = classifier]
d[order(size), , by = classifier]
d[order(size), diff, by = classifier]
d[order(size), .(size, diff), by = classifier]
print(d[order(size), .(size, diff), by = classifier], nrow = 1000)
